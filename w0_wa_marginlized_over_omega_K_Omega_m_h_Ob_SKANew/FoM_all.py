from scipy import *
from numpy import *
from scipy import linalg
#import warnings
#warnings.simplefilter("ignore", np.ComplexWarning)
#********************************************* 
#               FUNCTIONS
#*********************************************
def FoM(dx, dy, dxy, Delta_x):
	part1 = (dx**2 + dy**2)/ 2.0
	part2 =sqrt( (((dx**2 - dy**2 )**2)/ 4.0) + dxy**2)
	a = abs(part1 + part2)
	b = abs(part1 -  part2)
	FoM =pi/( pi * Delta_x * sqrt(a)* sqrt(b) )
	return FoM


def DET2x2(A):
	A = A[0:2,0:2]
	DET = linalg.det(A)
	return DET

def identity(n):
    return [[1 if i==j else 0 for j in range(n)] for i in range(n)]




def add_cmb_1(prior_cov, matrix):
	prior_inv2= linalg.inv(prior_cov)
	full_matrix = prior_inv2 + matrix
	SKA_plus_prior = linalg.inv(full_matrix)
	w0 = sqrt(abs(SKA_plus_prior[0,0]))    #print 'sigma_w0 = ', w0
	wa = sqrt(abs(SKA_plus_prior[1,1])  ) # ; print 'sigma_wa =', wa
	w0a = (abs(SKA_plus_prior[0,1]))  #;  print 'sigma w0a = ', w0a   
	wa0 =(abs(SKA_plus_prior[1,0]))  # ; print' wa0 = ', wa0
	ob0 =sqrt(abs(SKA_plus_prior[2,2]) )   #print'sigma_ob0 =', ob0
	ok0 = sqrt((abs(SKA_plus_prior[3,3])) )  #print 'sigma_ok0=', ok0
	om0 = sqrt(abs(SKA_plus_prior[4,4]))  #print 'sigma_om0 = ', om0
	h = sqrt(SKA_plus_prior[5,5])       #print 'sigma_h = ',  h 
	#print'add_cmb_1'
	FoM2 =  1.0/sqrt(SKA_plus_prior[0,0] * SKA_plus_prior[1,1] - SKA_plus_prior[1,0]* SKA_plus_prior[0,1])
	#print  '&','%.4f' % w0,  '&', '%.2f' % wa,  '&','%.3f' % om0,  '&', '%.3e' % ob0,  '&', '%.3f' % ok0,  '&',  '%.3f'  % h,  '&', '%.0f' % FoM2 , ' \\\ ' 
	#print'======================Thanks===================================================================='
	return
def add_cmb_2(M, prior_fish, matrix, n):
	#print M
       #======== convert the parameters ============
	MT = M.T
	#print MT
	M11 = dot(M, prior_fish)
	#print M11
	Final_prior_Fisher = dot(M11 , MT)
	#print 'final prior matrix ', Final_prior_Fisher
	#===== Stack new columns and raws===========
	newraw = linspace(0.,0.,n)
	matrix = vstack((matrix,newraw))
	#print 'matrix', matrix
	matrix = vstack((newraw, matrix))
	newcolumn = linspace(0., 0., n+2)
	matrix= column_stack((newcolumn, matrix))
	matrix = column_stack(( matrix, newcolumn))
	#print 'matrix after adding columns ', matrix
	matrix_plus_prior = matrix +  Final_prior_Fisher 
	#print 'matrix + final prior ',  matrix_plus_prior
	matrix_plus_prior =  linalg.inv(matrix_plus_prior)
	#print matrix_plus_prior
	#============parameters========================
	w0 = sqrt(matrix_plus_prior[1,1]) ;   print 'sigma_w0 = ', w0
	wa = sqrt(matrix_plus_prior[2,2])    ; print 'sigma_wa =', wa
	w0a = (matrix_plus_prior[2,1])  ;  print 'sigma w0a = ', w0a   
	wa0 =((matrix_plus_prior[1,2]))   ; print' wa0 = ', wa0
	ob0 =sqrt(matrix_plus_prior[3,3])    #print'sigma_ob0 =', ob0
	ok0 = sqrt((matrix_plus_prior[4,4]))   #print 'sigma_ok0=', ok0
	om0 = sqrt(matrix_plus_prior[5,5])  #print 'sigma_om0 = ', om0
	h = sqrt(matrix_plus_prior[6,6])       #print 'sigma_h = ',  h
	FoM2 =  1.0/sqrt(matrix_plus_prior[1,1] * matrix_plus_prior[2,2] - matrix_plus_prior[1,2]* matrix_plus_prior[2,1])#/(pi*(sqrt(2.31)))
	#print 'add_cmb_2'
	#print'================================================================================================'
	#print  '&','%.4f' % w0,  '&', '%.2f' % wa,  '&','%.3f' % om0,  '&', '%.3e' % ob0,  '&', '%.3f' % ok0,  '&',  '%.3f'  % h,  '&', '%.3d' % FoM2 , ' \\\ ' 
	#print'======================Thanks===================================================================='
	return 
Delta_x = 1.0
#=================== SKA Fisher matrix ===================================================================




#===================Test  add_cmb_2 function
#M1 = mat('[1. 0. 1.; 1. 0. 0.; 0. 0. 1.]')
#prior = mat('[1. 2. 3.; 4. 5. 6.; 7. 8. 9.]')
#matix = mat('[11; 13]')
#z = add_cmb_2(M1, prior, matix, 1)
#======================================




#
SKA_200mJy = mat('[8921.4770211480518        2462.5996256906888        5623.6875770853867       -143835.01185180221        134388.48026138125        129507.20381928149      ;   2462.5996256906888        680.89538546639824        1555.5811256561558       -39804.672104939644        37173.505913101573        35765.253293479313      ;   5623.6875770853867        1555.5811256561558        3554.4255317106472       -90963.682555441250        84939.612818323018        81693.919443344916      ;  -143835.01185180221       -39804.672104939644       -90963.682555441250        2328215.2090432076       -2173746.4768517772       -2089821.6313567397      ;   134388.48026138125        37173.505913101573        84939.612818323018       -2173746.4768517772        2029790.1197705977        1952228.2363837883      ;   129507.20381928149        35765.253293479313        81693.919443344916       -2089821.6313567397        1952228.2363837883        1880920.4624435075]')

SKA_100mJy = mat('[8998.2694426105863        2471.3306131802547        5630.4502862029340       -143747.32692932041        134550.08778105574        130164.78223316962      ;   2471.3306131802547        681.94782907012143        1556.3718014341607       -39794.481731733351        37192.400582253984        35835.597717121003      ;   5630.4502862029340        1556.3718014341607        3555.0291497835442       -90955.880223523054        84954.037395499996        81750.292568635108      ;  -143747.32692932041       -39794.481731733351       -90955.880223523054        2328316.2841426278       -2173560.0256105573       -2089087.2946072938      ;   134550.08778105574        37192.400582253984        84954.037395499996       -2173560.0256105573        2030134.8218861858        1953575.3771222252      ;   130164.78223316962        35835.597717121003        81750.292568635108       -2089087.2946072938        1953575.3771222252        1886937.8384364578]')

SKA_70mJy = mat('[9139.9248319502058        2489.9010949338349        5643.9481048491471       -143580.37240333622        134872.64327686591        131257.87194999732      ;   2489.9010949338349        684.51477819455761        1558.1961927547916       -39772.046693785393        37235.997808028165        35971.867399013114      ;   5643.9481048491471        1558.1961927547916        3556.3384818248192       -90939.744980379473        84985.326321275570        81851.684253523927      ;  -143580.37240333622       -39772.046693785393       -90939.744980379473        2328515.7243881007       -2173174.4439481711       -2087828.2525034167      ;   134872.64327686591        37235.997808028165        84985.326321275570       -2173174.4439481711        2030882.5289958632        1955998.3201212054      ;   131257.87194999732        35971.867399013114        81851.684253523927       -2087828.2525034167        1955998.3201212054        1895812.0228697506]')

SKA_23mJy = mat('[17974.077116039385        3903.9790989713792        6625.2303995096454       -132612.27564887769        158322.20986092777        192819.37570569932      ;   3903.9790989713792        924.91905847616022        1722.8711552019035       -37954.531812646201        41171.212493591665        45381.741322059992      ;   6625.2303995096454        1722.8711552019035        3669.6191252118319       -89687.415003160932        87692.378108761637        88475.582011387756      ;  -132612.27564887769       -37954.531812646201       -89687.415003160932        2342493.2502670395       -2143247.6885732934       -2013252.7761153562      ;   158322.20986092777        41171.212493591665        87692.378108761637       -2143247.6885732934        2095572.5692448013        2114288.6840299782      ;   192819.37570569932        45381.741322059999        88475.582011387756       -2013252.7761153562        2114288.6840299782        2345157.0513910209]')

SKA_73mJy = mat('[51882.535764975590        10820.466109054621        11506.502394013492       -88318.602995657013        274969.28815111157        409972.75746871968      ;   10820.466109054621        2391.5254471117273        2765.2618132317962       -28550.325704063569        66081.077142207330        89221.040034281250      ;   11506.502394013492        2765.2618132317962        4413.5563799417760       -83002.008291458711        105470.14326775658        119456.67478465344      ;  -88318.602995657013       -28550.325704063569       -83002.008291458711        2403704.6261532237       -1983487.4537452168       -1732634.2326172432      ;   274969.28815111157        66081.077142207330        105470.14326775658       -1983487.4537452168        2520405.3519007834        2854639.5512440260      ;   409972.75746871968        89221.040034281235        119456.67478465344       -1732634.2326172432        2854639.5512440260        3744979.2125628917]')

SKA_3mJy = mat('[115849.13846590994        25576.417923974990        22752.423089063639       -5939.6566758561821        543711.49166645785        829269.31599424267      ;   25576.417923974990        5900.7813825581816        5482.4572322256608       -8614.9837833347337        131013.51834318630        186339.06716855860      ;   22752.423089063632        5482.4572322256608        6542.2612816894398       -67432.826181818586        156339.50838620184        193883.05801382093      ;  -5939.6566758561821       -8614.9837833347337       -67432.826181818586        2521374.4945049058       -1611432.8731969111       -1189219.0816914986      ;   543711.49166645785        131013.51834318630        156339.50838620184       -1611432.8731969111        3736023.4986101766        4633196.4850029219      ;   829269.31599424267        186339.06716855860        193883.05801382093       -1189219.0816914986        4633196.4850029219        6503113.1295080818]')

SKA_0mJy = mat('[286141.82650498417        66934.212943662991        56249.712571207150        187201.75564243065        1344191.5618473664        1985755.1854354101      ;   66934.212943662991        16145.548261294985        13905.643710496548        40519.419444285486        332301.23467818875        469440.07999110711      ;   56249.712571207150        13905.643710496548        13560.096059146670       -26233.996703309283        324043.73048965278        424994.94917808782      ;   187201.75564243065        40519.419444285501       -26233.996703309283        2776287.1238588728       -626910.17234051577        147584.09290447040      ;   1344191.5618473664        332301.23467818880        324043.73048965278       -626910.17234051600        7743627.9810733609        10156045.220493400      ;   1985755.1854354101        469440.07999110711        424994.94917808782        147584.09290447040        10156045.220493402        14393754.926244542]')

SKA_0mJy_5000 = mat('[55098.904508325366        13205.618285725421        14059.311511186930       -88690.426166058605        335973.41274939536        438594.46474552865      ;   13205.618285725421        3258.1244621466508        3613.7420204649220       -26419.821095586551        86357.090704294023        108022.05952987027      ;   14059.311511186930        3613.7420204649220        5221.8742380135191       -80177.641545184946        124786.40275504050        138888.84105487831      ;  -88690.426166058605       -26419.821095586551       -80177.641545184946        2402863.0334145301       -1915993.9542344867       -1717225.5851374294      ;   335973.41274939536        86357.090704294023        124786.40275504050       -1915993.9542344867        2982003.3196484777        3319007.3272710592      ;   438594.46474552865        108022.05952987028        138888.84105487831       -1717225.5851374294        3319007.3272710592        3962729.7179570021]')

Euclid = mat('[29632.202555913660        7302.2751739594223        9336.2036263373921       -116190.58763300501        223105.96020068141        264883.47437447630      ;   7302.2751739594223        1848.3331271306988        2467.3627254840485       -33028.478214173301        58962.224054280225        67603.649529263363      ;   9336.2036263373921        2467.3627254840485        4277.2119888013058       -85636.063309931211        102211.94030637736        106315.15820454145      ;  -116190.58763300501       -33028.478214173301       -85636.063309931211        2369236.5488992785       -2046433.1003525709       -1907963.1568785645      ;   223105.96020068141        58962.224054280217        102211.94030637736       -2046433.1003525709        2442544.5286667487        2540598.5563766868      ;   264883.47437447630        67603.649529263363        106315.15820454145       -1907963.1568785645        2540598.5563766868        2769570.1841263231]')

Euclid0N = mat('[54451.664268673405        13364.482904137825        14271.735785399518       -87247.290634190722        341049.68610042165        433835.22454375913      ;   13364.482904137825        3361.4471979229897        3719.3135041301243       -25609.541130736121        88879.917773584864        109230.08849720127      ;   14271.735785399518        3719.3135041301239        5327.9884228861774       -79378.711361976690        127322.19867964317        140504.21172173115      ;  -87247.290634190722       -25609.541130736121       -79378.711361976690        2408664.6984936600       -1896902.0307084019       -1707076.0520093706      ;   341049.68610042165        88879.917773584864        127322.19867964317       -1896902.0307084019        3042600.8823489612        3357609.6155385878      ;   433835.22454375913        109230.08849720127        140504.21172173115       -1707076.0520093706        3357609.6155385878        3925821.2758734724]')

#==================Plank's prior matrix =====================================================================
Planks_prior = mat('[1.99579245e+05  -3.73667528e+04  -1.04936812e+04   1.39977603e+06    5.58643962e+05  -4.64225267e+04  -7.65181989e+04  -2.23806234e+03;  -3.73667528e+04   1.83928663e+05   5.16525685e+04  -7.42050738e+06   -3.98758357e+06  -1.11710442e+06   1.32438370e+06  -4.51559188e+02;  -1.04936812e+04   5.16525685e+04   1.45055577e+04  -2.08389634e+06   -1.11983054e+06  -3.13715719e+05   3.71925825e+05  -1.26811078e+02;  1.39977603e+06  -7.42050738e+06  -2.08389634e+06   3.64943809e+08    1.58599621e+08   4.25932543e+07  -5.16878541e+07   3.20338905e+04;   5.58643962e+05  -3.98758357e+06  -1.11983054e+06   1.58599621e+08    8.70535526e+07   2.48738854e+07  -2.91740427e+07   1.88438127e+04;  -4.64225267e+04  -1.11710442e+06  -3.13715719e+05   4.25932543e+07    2.48738854e+07   7.49686718e+06  -8.54525588e+06   1.25851649e+04;  -7.65181989e+04   1.32438370e+06   3.71925825e+05  -5.16878541e+07   -2.91740427e+07  -8.54525588e+06   9.88949015e+06  -1.01838183e+04; -2.23806234e+03  -4.51559188e+02  -1.26811078e+02   3.20338905e+04    1.88438127e+04   1.25851649e+04  -1.01838183e+04   1.51709659e+04]' )

#=================Inverse of the Planck fisher matrix , minus ns and sigma8 raws and column ============================
prior_inv1 = mat('[-3.20220084e+03   4.73166943e+04   2.13900236e-05  5.48234698e+02  -8.08642777e+02  -4.32094449e+02 ;  4.73166848e+04  -7.21954893e+05  -3.10228608e-04  -7.99336941e+03   1.38090118+04   9.16638205e+03 ; 2.13900192e-05  -3.10228604e-04   2.28286048e-08 -3.48191844e-06   6.23816361e-06   4.04255574e-06 ;  5.48234563e+02  -7.99336894e+03  -3.48191828e-06  -8.58740714e+01   1.54794800e+02   1.07622797e+02 ;  -8.08642535e+02   1.38090109e+04   6.23816332e-06  1.54794800e+02  -2.81726183e+02  -1.97826849e+02 ;  -4.32094280e+02   9.16638144e+03   4.04255552e-06  1.07622796e+02  -1.97826848e+02  -1.40315032e+02]')
#=====================================================================================================
print'========================================================'
M = mat('[1. 0.  0. 0. 0. 0. 0. 0.;  0. 1. 0. 0. 0. 0. 0. 0.  ; 0.  0. 1. 0. 0. 0. 0. 0. ;0.  0.  0. 1. 0. 0. 0. 0. ; 0. 0. 0. 0. 1. 0. 0.  0. ;0.  0. 0. 1. 1. 1. 0. 0. ;  0. 0. 0. 0. 0. 0. 1. 0.; 0. 0. 0. 0. 0. 0. 0. 1.]')
#============================Main progarm ===========================================================================

print '=====0 uJy (30000) =========================='
SKA_0mJy_1 = add_cmb_1(prior_inv1, SKA_0mJy)
SKA_0mJy_2 = add_cmb_2(M, Planks_prior, SKA_0mJy, 6.)

print '=====0 uJy (5000)=========================='
SKA_0mJy_5000_1 = add_cmb_1(prior_inv1, SKA_0mJy_5000)
SKA_0mJy_5000_2 = add_cmb_2(M, Planks_prior, SKA_0mJy_5000, 6.)
print '=====3 uJy =========================='
SKA_3mJy_1 = add_cmb_1(prior_inv1, SKA_3mJy)
SKA_3mJy_2 = add_cmb_2(M, Planks_prior, SKA_3mJy, 6.)

print '=====7.3 uJy =========================='
SKA_73mJy_1 = add_cmb_1(prior_inv1, SKA_73mJy)
SKA_73mJy_2 = add_cmb_2(M, Planks_prior, SKA_73mJy, 6.)

print '=====23 uJy =========================='
SKA_23mJy_1 = add_cmb_1(prior_inv1, SKA_23mJy)
SKA_23mJy_2 = add_cmb_2(M, Planks_prior, SKA_23mJy, 6.)

print '=====70 uJy =========================='
SKA_70mJy_1 = add_cmb_1(prior_inv1, SKA_70mJy)
SKA_70mJy_2 = add_cmb_2(M, Planks_prior, SKA_70mJy, 6.)

print '=====100 uJy =========================='
SKA_100mJy_1 = add_cmb_1(prior_inv1, SKA_100mJy)
SKA_100mJy_2 = add_cmb_2(M, Planks_prior, SKA_100mJy, 6.)
print '=====200 uJy =========================='
SKA_200mJy_1 = add_cmb_1(prior_inv1, SKA_200mJy)
SKA_200mJy_2 = add_cmb_2(M, Planks_prior, SKA_200mJy, 6.)

print '===== Euclid 0N =========================='
SKA_Euclid0N_1 = add_cmb_1(prior_inv1, Euclid0N)
SKA_Euclid0N_2 = add_cmb_2(M, Planks_prior, Euclid0N, 6.)
print '=====Euclid =========================='
SKA_Euclid_1 = add_cmb_1(prior_inv1, Euclid)
SKA_Euclid_2 = add_cmb_2(M, Planks_prior, Euclid, 6.)
print '======================================='
print '========Thanks ========================='
