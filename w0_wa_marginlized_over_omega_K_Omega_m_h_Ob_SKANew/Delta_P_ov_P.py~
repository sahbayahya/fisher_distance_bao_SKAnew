from math import *from numpy import *from scipy import *import cosmolopy.constants as ccimport cosmolopy.distance as cdimport cosmolopy.perturbation as cpimport matplotlib.pyplot as pltimport matplotlib.ticker as ticimport matplotlib.axis from scipy.integrate import quadfrom scipy import special#===================Read the file==================================(z,k_7, p_7) = loadtxt('cosmic_v_k_73_2.txt', unpack=True)#k0_ov_h = 9.9226999999999996E-002k_ov_h = 0.10123V_sur = 32579685042.108799bin_edge = logspace(-4, 0, 31)aK= zeros(len(bin_edge))dlnk = zeros(len(bin_edge))print bin_edgefor i in range(len(bin_edge)):	dlnk=log(k_ov_h) - log(k0_ov_h)	aK[i] = V_sur * (bin_edge[i])**3* (dlnk)/(2.**3. * pi**2 )		#print '%.3e' % V_surprint  aK,  #print sqrt((aK)**-1)#==========================================#====================================================================fig = plt.figure()ax = fig.add_subplot(111, yscale='log')#=========Set log scale on the yaxis========================#========= defult plotting =================================ax.set_xscale('log')ax.plot(k_7, sqrt((p_7)**-1), color = 'green',  linewidth=2.5, linestyle="-", label =r'$7.3\ \mu{\rm Jy}$')ax.plot(bin_edge, sqrt((aK)**-1), 'red',  linewidth=2.5, linestyle="--", label =r'${\rm Analytic}$')#====================== Labels ==========================ax.set_xlabel(r"$k \ [{\rm Mpc}^{-1} h]$", fontsize=15)ax.set_ylabel(r"$\delta P/P$ ", fontsize= 17)#==============Set Tickers =============================plt.tick_params(which='both', width=1)plt.tick_params(which='major', length=5)plt.tick_params(which='minor', length=2, color='g')#======================================================#================= yaxis#plt.yticks(yticks,[r'$1$', r'$10$', '','','','','','','','', r'$10^2$', r'$10^3$',r'$10^4$',r'$10^5$',r'$10^6$', r'$10^7$' ])#plt.yticks(yticks,[r'$1$', r'$10$',r'$10^2$', r'$10^3$',r'$10^4$',r'$10^5$',r'$10^6$', r'$10^7$' ])#ax.set_yscale('log')#==================xaxis#plt.xticks(xticks,[r'$0$', r'$0.2$',r'$0.4$', r'$0.6$',r'$0.8$',r'$1.0$',r'$1.2$', r'$1.4$',r'$1.6$',r'$1.8$', r'$2.0$' ])#plt.ylim(1, 10**1)#plt.xlim(0.001, 1.0)ax.legend(loc='upper left')plt.savefig('deltaP_ov_p.eps')plt.show()print '============== The program executed successfully!=============================='